CREATE DATABASE ecommerce;

USE ecommerce;

CREATE TABLE customers (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  address TEXT
);
DESCRIBE customers;

CREATE TABLE orders (
  id INT PRIMARY KEY AUTO_INCREMENT,
  customer_id INT NOT NULL,
  order_date DATE NOT NULL,
  total_amount DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (customer_id) REFERENCES customers(id)
);
DESCRIBE orders;

CREATE TABLE products (
  id INT PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  description TEXT
);
DESCRIBE products;

INSERT INTO customers (name, email, address)
VALUES ('John Doe', 'john.doe@example.com', '123 Main St'),
       ('Jane Smith', 'jane.smith@example.com', '456 Elm St'),
       ('Michael Chen', 'michael.chen@example.com', '789 Maple Ave'),
       ('Ashley Williams', 'ashley.williams@example.com', '1011 Oak St'),
       ('David Miller', 'david.miller@example.com', '1213 Pine Ln');
SELECT * FROM customers;

INSERT INTO orders (customer_id, order_date, total_amount)
VALUES (1, '2024-10-15', 150.00),
       (1, '2024-10-10',250.00),
       (2, '2024-10-17', 375.00),
       (3, '2024-10-18', 120.00),
       (4, '2024-10-16', 85.00);
SELECT * FROM orders;

INSERT INTO products (name, price, description)
VALUES ('Product A', 20.00, 'A great product'),
       ('Product B', 30.00, 'Another awesome product'),
       ('Product C', 40.00, 'This product is good too');
SELECT * FROM products;
       
//1.Retrieve all customers who have placed an order in the last 30 days.

SELECT * FROM customers
WHERE id IN (SELECT customer_id FROM orders WHERE order_date >= CURDATE() - INTERVAL 30 DAY);

//2.Get the total amount of all orders placed by each customer.

SELECT c.name, SUM(o.total_amount) AS total_spent
FROM customers c
INNER JOIN orders o ON c.id = o.customer_id
GROUP BY c.name;

//3.Update the price of Product C to 45.00.

UPDATE products SET price = 45.00 WHERE name = 'Product C';
 SELECT * FROM products;

//4.Add a new column discount to the products table.

ALTER TABLE products ADD COLUMN discount DECIMAL(5,2) DEFAULT NULL;
 DESCRIBE products;

//5.Retrieve the top 3 products with the highest price.

SELECT * FROM products ORDER BY price DESC LIMIT 3;

//6.Get the names of customers who have ordered Product A.

CREATE TABLE order_items (
  id INT PRIMARY KEY AUTO_INCREMENT,
  order_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (order_id) REFERENCES orders(id),
  FOREIGN KEY (product_id) REFERENCES products(id)
);

SELECT c.name
FROM customers c
INNER JOIN orders o ON c.id = o.customer_id
INNER JOIN order_items oi ON o.id = oi.order_id
INNER JOIN products p ON oi.product_id = p.id
WHERE p.name = 'Product A';

//7.Join the orders and customers tables to retrieve the customer's name and order date for each order. 

SELECT c.name, o.order_date
FROM customers c
INNER JOIN orders o ON c.id = o.customer_id;

//8.Retrieve the orders with a total amount greater than 150.00.

SELECT * FROM orders WHERE total_amount > 150.00;

//9.Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table.

CREATE TABLE order_items (
  id INT PRIMARY KEY AUTO_INCREMENT,
  order_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10,2) NOT NULL,
  FOREIGN KEY (order_id) REFERENCES orders(id),
  FOREIGN KEY (product_id) REFERENCES products(id)
);



//10.Retrieve the average total of all orders.

SELECT AVG(total_amount) AS average_total FROM orders;
